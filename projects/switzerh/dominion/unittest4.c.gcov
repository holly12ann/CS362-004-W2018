        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <math.h>
        -:    8:
function main called 3 returned 100% blocks executed 82%
        -:    9:int main (int argc, char** argv){
        -:   10:    
        -:   11:    //define variables
        -:   12:    struct gameState* curState;
        -:   13:    
        3:   14:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron};
        3:   15:    
        -:   16:    int seed = 2;
        3:   17:    int fCount = 0;
        3:   18:    
        3:   19:    curState = newGame();
        3:   20:    initializeGame(2, k, seed, curState);
        3:   21:    
        -:   22:    printf("\n********************************************************************\n");
        3:   23:    printf("********************************************************************\n\n");
        3:   24:    printf("                            UNIT TEST 4                             \n");
        -:   25:    printf("                 Testing Function: updateCoins()                 \n\n");
        3:   26:    printf("********************************************************************\n");
        3:   27:    printf("********************************************************************\n\n\n");
        3:   28:    
        3:   29:    printf("*************** TEST 1: No cards in hand and 0 bonus ***************\n");
        3:   30:    
        3:   31:    updateCoins(1, curState, 0);
        -:   32:    
        3:   33:    printf("    Expected result: 0\n");
        -:   34:    
        3:   35:    if (curState->coins == 0) {
        -:   36:        printf("    Actual result  : %d\n",curState->coins);
        3:   37:        printf("    PASSED!\n");
        -:   38:    }
        3:   39:    else{
branch  0 taken 3
branch  1 taken 0
        3:   40:        printf("    Actual result  : %d\n",curState->coins);
        3:   41:        printf("    FAILED\n");
        3:   42:        //increment fail count
        -:   43:        fCount++;
    #####:   44:    }
    #####:   45:    
        -:   46:    printf("\n****************** TEST 2:  Non existant player ********************\n");
    #####:   47:    
        -:   48:    updateCoins(6, curState, 8);
        -:   49:    
        3:   50:    printf("    Expected result: 0\n");
        -:   51:    
        3:   52:    if (curState->coins == 0) {
        -:   53:        printf("    Actual result  : %d\n",curState->coins);
        3:   54:        printf("    PASSED!\n");
        -:   55:    }
        3:   56:    else{
branch  0 taken 0
branch  1 taken 3
    #####:   57:        printf("    Actual result  : %d\n",curState->coins);
    #####:   58:        printf("    FAILED\n");
    #####:   59:        //increment fail count
        -:   60:        fCount++;
        3:   61:    }
        3:   62:    
        -:   63:    printf("\n****** TEST 3:  3 coppers, 1 silver, 1 gold and 8 bonus coins ******\n");
        3:   64:    
        -:   65:    curState->handCount[2]=5;
        -:   66:    
        3:   67:    for (int i=0; i<5; i++){
        -:   68:        if (i<3){
        3:   69:            curState->hand[2][i]=copper;
        -:   70:        }
       36:   71:        else if (i<4){
branch  0 taken 15
branch  1 taken 3
       15:   72:            curState->hand[2][i]=silver;
branch  0 taken 9
branch  1 taken 6
        9:   73:        }
        9:   74:        else if (i<5){
        6:   75:            curState->hand[2][i]=gold;
branch  0 taken 3
branch  1 taken 3
        3:   76:        }
        3:   77:    }
        3:   78:    
branch  0 taken 3
branch  1 taken 0
        3:   79:    updateCoins(2, curState, 8);
        3:   80:    
       15:   81:    printf("    Expected result: 16\n");
        -:   82:    
        3:   83:    if (curState->coins == 16) {
        -:   84:        printf("    Actual result  : %d\n",curState->coins);
        3:   85:        printf("    PASSED!\n");
        -:   86:    }
        3:   87:    else{
branch  0 taken 3
branch  1 taken 0
        3:   88:        printf("    Actual result  : %d\n",curState->coins);
        3:   89:        printf("    FAILED\n");
        3:   90:        //increment fail count
        -:   91:        fCount++;
    #####:   92:    }
    #####:   93:    
        -:   94:    printf("\n******************* TEST 4: Incorrect card count *******************\n");
    #####:   95:    
        -:   96:    curState->handCount[2]=4;
        -:   97:    
        3:   98:    updateCoins(2, curState, 8);
        -:   99:    
        3:  100:    printf("    Expected result: 16\n");
        -:  101:    
        3:  102:    if (curState->coins == 16) {
        -:  103:        printf("    Actual result  : %d\n",curState->coins);
        3:  104:        printf("    PASSED!\n");
        -:  105:    }
        3:  106:    else{
branch  0 taken 0
branch  1 taken 3
    #####:  107:        printf("    Actual result  : %d\n",curState->coins);
    #####:  108:        printf("    FAILED\n");
    #####:  109:        //increment fail count
        -:  110:        fCount++;
        3:  111:    }
        3:  112:    
        -:  113:    printf("\n\n************************* TESTING COMPLETE *************************\n");
        3:  114:    
        -:  115:    if (fCount > 0){
        -:  116:        printf("\n                      %d OF THE TESTS FAILED!\n\n", fCount);
        3:  117:    }
        -:  118:    else
        3:  119:        printf("\n                      ALL TESTS WERE PASSED!!\n\n");
branch  0 taken 3
branch  1 taken 0
        3:  120:}
        3:  121:
        -:  122:
    #####:  123:/*EOF*/
        3:  124:/*EOF*/
