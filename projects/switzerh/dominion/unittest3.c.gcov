        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <math.h>
        -:    8:
function main called 0 returned 0% blocks executed 0%
        -:    9:int main (int argc, char** argv){
        -:   10:    
        -:   11:    //define variables
        -:   12:    struct gameState* curState;
        -:   13:    
        -:   14:    //int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron};
        -:   15:    //int testK[10] = {adventurer, adventurer, feast, feast, mine, remodel, smithy, village, baron};
        -:   16:    
        -:   17:    //int seed = 2;
        -:   18:    //int curseCount = 0;
        -:   19:    //int playerCount = 0;
    #####:   20:    int result = 0;
    #####:   21:    int fCount = 0;
        -:   22:    
    #####:   23:    curState = newGame();
    #####:   24:    printf("\n********************************************************************\n");
    #####:   25:    printf("********************************************************************\n\n");
    #####:   26:    printf("                            UNIT TEST 3                             \n");
    #####:   27:    printf("                 Testing Function: isGameOver()                 \n\n");
    #####:   28:    printf("********************************************************************\n");
    #####:   29:    printf("********************************************************************\n\n\n");
        -:   30:    
    #####:   31:    printf("********************* TEST 1: 3 provinces left *********************\n");
        -:   32:    
    #####:   33:    curState->supplyCount[province]=3;
    #####:   34:    for (int i=0; i<25; i++){
branch  0 never executed
branch  1 never executed
    #####:   35:        curState->supplyCount[i]=1;
    #####:   36:    }
    #####:   37:    result = isGameOver(curState);
        -:   38:    
    #####:   39:    printf("    Expected result: 0\n");
        -:   40:    
    #####:   41:    if (result == 0) {
branch  0 never executed
branch  1 never executed
    #####:   42:        printf("    Actual result  : %d\n",result);
    #####:   43:        printf("    PASSED!\n");
    #####:   44:    }
        -:   45:    else{
    #####:   46:        printf("    Actual result  : %d\n",result);
    #####:   47:        printf("    FAILED\n");
        -:   48:        //increment fail count
    #####:   49:        fCount++;
        -:   50:    }
        -:   51:    
    #####:   52:    printf("********************* TEST 2: 0 provinces left *********************\n");
        -:   53:    
    #####:   54:    curState->supplyCount[province] = 0;
    #####:   55:    result = isGameOver(curState);
        -:   56:    
    #####:   57:    printf("    Expected result: 1\n");
        -:   58:    
    #####:   59:    if (result == 1) {
branch  0 never executed
branch  1 never executed
    #####:   60:        printf("    Actual result  : %d\n",result);
    #####:   61:        printf("    PASSED!\n");
    #####:   62:    }
        -:   63:    else{
    #####:   64:        printf("    Actual result  : %d\n",result);
    #####:   65:        printf("    FAILED\n");
        -:   66:        //increment fail count
    #####:   67:        fCount++;
        -:   68:    }
        -:   69:    
    #####:   70:    printf("********************* TEST 3: -1 provinces left *********************\n");
        -:   71:    
    #####:   72:    curState->supplyCount[province] = -1;
    #####:   73:    result = isGameOver(curState);
        -:   74:    
    #####:   75:    printf("    Expected result: 1\n");
        -:   76:    
    #####:   77:    if (result == 1) {
branch  0 never executed
branch  1 never executed
    #####:   78:        printf("    Actual result  : %d\n",result);
    #####:   79:        printf("    PASSED!\n");
    #####:   80:    }
        -:   81:    else{
    #####:   82:        printf("    Actual result  : %d\n",result);
    #####:   83:        printf("    FAILED\n");
        -:   84:        //increment fail count
    #####:   85:        fCount++;
        -:   86:    }
        -:   87:    
    #####:   88:    printf("*********************** TEST 4: 3 empty piles ***********************\n");
        -:   89:    
    #####:   90:    curState->supplyCount[province] = 3;
    #####:   91:    for (int i=0; i<3; i++){
branch  0 never executed
branch  1 never executed
    #####:   92:        curState->supplyCount[i]=0;
    #####:   93:    }
    #####:   94:    result = isGameOver(curState);
        -:   95:    
    #####:   96:    printf("    Expected result: 1\n");
        -:   97:    
    #####:   98:    if (result == 1) {
branch  0 never executed
branch  1 never executed
    #####:   99:        printf("    Actual result  : %d\n",result);
    #####:  100:        printf("    PASSED!\n");
    #####:  101:    }
        -:  102:    else{
    #####:  103:        printf("    Actual result  : %d\n",result);
    #####:  104:        printf("    FAILED\n");
        -:  105:        //increment fail count
    #####:  106:        fCount++;
        -:  107:    }
        -:  108:    
    #####:  109:    printf("*********************** TEST 5: Negative supply count ***********************\n");
        -:  110:    
    #####:  111:    curState->supplyCount[province] = 3;
    #####:  112:    for (int i=0; i<3; i++){
branch  0 never executed
branch  1 never executed
    #####:  113:        curState->supplyCount[i]=-1;
    #####:  114:    }
    #####:  115:    result = isGameOver(curState);
        -:  116:    
    #####:  117:    printf("    Expected result: 1\n");
        -:  118:    
    #####:  119:    if (result == 1) {
branch  0 never executed
branch  1 never executed
    #####:  120:        printf("    Actual result  : %d\n",result);
    #####:  121:        printf("    PASSED!\n");
    #####:  122:    }
        -:  123:    else{
    #####:  124:        printf("    Actual result  : %d\n",result);
    #####:  125:        printf("    FAILED\n");
        -:  126:        //increment fail count
    #####:  127:        fCount++;
        -:  128:    }
        -:  129:     
    #####:  130:    printf("\n\n************************* TESTING COMPLETE *************************\n");
        -:  131:    
    #####:  132:    if (fCount > 0){
branch  0 never executed
branch  1 never executed
    #####:  133:        printf("\n                      %d OF THE TESTS FAILED!\n\n", fCount);
    #####:  134:    }
        -:  135:    else
    #####:  136:        printf("\n                      ALL TESTS WERE PASSED!!\n\n");
    #####:  137:}
        -:  138:
        -:  139:
