        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:22
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2519198 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
  2519198:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 16
branch  1 taken 2519182
       16:   10:    return 1;
  2519182:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 899704
branch  1 taken 1619478
   899704:   12:    return -1;
  1619478:   13:  return 0;
  2519198:   14:}
        -:   15:
function newGame called 30 returned 100% blocks executed 100%
        -:   16:struct gameState* newGame() {
       60:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       30:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 60026 returned 100% blocks executed 98%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    60026:   44:  SelectStream(1);
    60026:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
   120050:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 60024
branch  1 taken 2
branch  2 taken 2
branch  3 taken 60022
        -:   49:    {
        4:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    60022:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
  1320444:   57:  for (i = 0; i < 10; i++)
branch  0 taken 600202
branch  1 taken 60020
        -:   58:    {
 13204408:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6002004
branch  1 taken 600200
        -:   60:        {
 11403806:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5401802
branch  1 taken 600202
branch  2 taken 2
branch  3 taken 5401800
        -:   62:	    {
        2:   63:	      return -1;
        -:   64:	    }
  6002002:   65:        }
   600200:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    60020:   73:  if (numPlayers == 2)
branch  0 taken 19991
branch  1 taken 40029
        -:   74:    {
    19991:   75:      state->supplyCount[curse] = 10;
    19991:   76:    }
    40029:   77:  else if (numPlayers == 3)
branch  0 taken 20158
branch  1 taken 19871
        -:   78:    {
    20158:   79:      state->supplyCount[curse] = 20;
    20158:   80:    }
        -:   81:  else
        -:   82:    {
    19871:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    60020:   87:  if (numPlayers == 2)
branch  0 taken 19991
branch  1 taken 40029
        -:   88:    {
    19991:   89:      state->supplyCount[estate] = 8;
    19991:   90:      state->supplyCount[duchy] = 8;
    19991:   91:      state->supplyCount[province] = 8;
    19991:   92:    }
        -:   93:  else
        -:   94:    {
    40029:   95:      state->supplyCount[estate] = 12;
    40029:   96:      state->supplyCount[duchy] = 12;
    40029:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    60020:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    60020:  102:  state->supplyCount[silver] = 40;
    60020:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  2520840:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1200400
branch  1 taken 60020
        -:  107:    {
 19926640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 9303100
branch  1 taken 660220
        -:  109:	{
  9303100:  110:	  if (kingdomCards[j] == i)
branch  0 taken 540180
branch  1 taken 8762920
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
  1080360:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 540180
branch  1 taken 0
branch  2 taken 60020
branch  3 taken 480160
        -:  114:		{
    60020:  115:		  if (numPlayers == 2){ 
branch  0 taken 19991
branch  1 taken 40029
    19991:  116:		    state->supplyCount[i] = 8; 
    19991:  117:		  }
    40029:  118:		  else{ state->supplyCount[i] = 12; }
    60020:  119:		}
        -:  120:	      else
        -:  121:		{
   480160:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   540180:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  8762920:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  8762920:  130:	}
        -:  131:
  1200400:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   479920:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 179940
branch  1 taken 60020
        -:  139:    {
   179940:  140:      state->deckCount[i] = 0;
  1439520:  141:      for (j = 0; j < 3; j++)
branch  0 taken 539820
branch  1 taken 179940
        -:  142:	{
   539820:  143:	  state->deck[i][j] = estate;
   539820:  144:	  state->deckCount[i]++;
   539820:  145:	}
  2879040:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1259580
branch  1 taken 179940
        -:  147:	{
  1259580:  148:	  state->deck[i][j] = copper;
  1259580:  149:	  state->deckCount[i]++;		
  1259580:  150:	}
   179940:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   479920:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 179940
branch  1 taken 60020
        -:  155:    {
   179940:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 179940
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
   179940:  160:    }
        -:  161:
        -:  162:  //draw player hands
   479920:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 179940
branch  1 taken 60020
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   179940:  166:      state->handCount[i] = 0;
   179940:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
   179940:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  3361120:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1620540
branch  1 taken 60020
        -:  177:    {
  1620540:  178:      state->embargoTokens[i] = 0;
  1620540:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    60020:  182:  state->outpostPlayed = 0;
    60020:  183:  state->phase = 0;
    60020:  184:  state->numActions = 1;
    60020:  185:  state->numBuys = 1;
    60020:  186:  state->playedCardCount = 0;
    60020:  187:  state->whoseTurn = 0;
    60020:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   720240:  192:  for (it = 0; it < 5; it++){
branch  0 taken 300100
branch  1 taken 60020
   300100:  193:    drawCard(state->whoseTurn, state);
   300100:  194:  }
        -:  195:
    60020:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    60020:  198:  return 0;
    60026:  199:}
        -:  200:
function shuffle called 183168 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   183168:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   183168:  209:  if (state->deckCount[player] < 1)
branch  0 taken 3226
branch  1 taken 179942
     3226:  210:    return -1;
   179942:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3958724:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 1799420
branch  1 taken 179942
  1799420:  215:    card = floor(Random() * state->deckCount[player]);
  1799420:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1799420:  217:    newDeckPos++;
 11692688:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 4046924
branch  1 taken 1799420
  4046924:  219:      state->deck[player][i] = state->deck[player][i+1];
  4046924:  220:    }
  1799420:  221:    state->deckCount[player]--;
        -:  222:  }
  3958724:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 1799420
branch  1 taken 179942
  1799420:  224:    state->deck[player][i] = newDeck[i];
  1799420:  225:    state->deckCount[player]++;
  1799420:  226:  }
        -:  227:
   179942:  228:  return 0;
   183168:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 60014 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
    60014:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 120010 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
   120010:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2
branch  1 taken 8
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      416:  402:  for (i = 0; i < 25; i++)
branch  0 taken 200
branch  1 taken 8
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6
branch  1 taken 194
        -:  405:	{
        6:  406:	  j++;
        6:  407:	}
      200:  408:    }
        8:  409:  if ( j >= 3)
branch  0 taken 2
branch  1 taken 6
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        6:  414:  return 0;
       10:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 462451 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   462451:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1612
branch  1 taken 460839
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     3224:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 1612
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
     1612:  538:    state->deckCount[player] = state->discardCount[player];
     1612:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1612:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1612:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1612:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1612:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1612:  559:    if (deckCounter == 0)
branch  0 taken 1612
branch  1 taken 0
     1612:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
   460839:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   460839:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   460839:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   460839:  576:    state->deckCount[player]--;
   460839:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   460839:  580:  return 0;
   462451:  581:}
        -:  582:
function getCost called 2 returned 100% blocks executed 12%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        2:  585:  switch( cardNumber ) 
branch  0 taken 2
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        2:  644:}
        -:  645:
function cardEffect called 60010 returned 100% blocks executed 10%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    60010:  653:  int currentPlayer = whoseTurn(state);
    60010:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    60010:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    60010:  658:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0
branch  1 taken 60010
    #####:  659:    nextPlayer = 0;
    #####:  660:  }
        -:  661:  
        -:  662:	
        -:  663:  //uses switch to select card and perform actions
    60010:  664:  switch( card ) 
branch  0 taken 20002
branch  1 taken 0
branch  2 taken 2
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 20004
branch  7 taken 20002
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  665:    {
        -:  666:    case adventurer:
    20002:  667:      return cardEffectAdventurer(currentPlayer,state, handPos); 
        -:  668:			
        -:  669:    case council_room:
        -:  670:      //+4 Cards
    #####:  671:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  672:	{
    #####:  673:	  drawCard(currentPlayer, state);
    #####:  674:	}
        -:  675:			
        -:  676:      //+1 Buy
    #####:  677:      state->numBuys++;
        -:  678:			
        -:  679:      //Each other player draws a card
    #####:  680:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  681:	{
    #####:  682:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  683:	    {
    #####:  684:	      drawCard(i, state);
    #####:  685:	    }
    #####:  686:	}
        -:  687:			
        -:  688:      //put played card in played card pile
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
        -:  690:			
    #####:  691:      return 0;
        -:  692:			
        -:  693:    case feast:
        -:  694:      //gain card with cost up to 5
        -:  695:      //Backup hand
       28:  696:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 12
branch  1 taken 2
       12:  697:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       12:  698:	state->hand[currentPlayer][i] = -1;//Set to nothing
       12:  699:      }
        -:  700:      //Backup hand
        -:  701:
        -:  702:      //Update Coins for Buy
        2:  703:      updateCoins(currentPlayer, state, 5);
        2:  704:      x = 1;//Condition to loop on
        8:  705:      while( x == 1) {//Buy one card
branch  0 taken 2
branch  1 taken 2
        2:  706:	if (supplyCount(choice1, state) <= 0){
branch  0 taken 0
branch  1 taken 2
        -:  707:	  if (DEBUG)
        -:  708:	    printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	  }
    #####:  713:	}
        2:  714:	else if (state->coins < getCost(choice1)){
branch  0 taken 0
branch  1 taken 2
    #####:  715:	  printf("That card is too expensive!\n");
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:	  }
    #####:  720:	}
        -:  721:	else{
        -:  722:
        -:  723:	  if (DEBUG){
        -:  724:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:	  }
        -:  726:
        2:  727:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        2:  728:	  x = 0;//No more buying cards
        -:  729:
        -:  730:	  if (DEBUG){
        -:  731:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  732:	  }
        -:  733:
        -:  734:	}
        -:  735:      }     
        -:  736:
        -:  737:      //Reset Hand
       28:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 12
branch  1 taken 2
       12:  739:	state->hand[currentPlayer][i] = temphand[i];
       12:  740:	temphand[i] = -1;
       12:  741:      }
        -:  742:      //Reset Hand
        -:  743:      			
        2:  744:      return 0;
        -:  745:			
        -:  746:    case gardens:
    #####:  747:      return -1;
        -:  748:			
        -:  749:    case mine:
    #####:  750:      return cardEffectMine(currentPlayer, state, choice1, choice2, handPos);
        -:  751:			
        -:  752:    case remodel:
    #####:  753:      return cardEffectRemodel(currentPlayer, state, choice1, choice2, handPos);
        -:  754:		
        -:  755:    case smithy:
    20004:  756:      return cardEffectSmithy(currentPlayer, state, handPos);
        -:  757:		
        -:  758:    case village:
    20002:  759:      return cardEffectVillage(currentPlayer, state, handPos);
        -:  760:		
        -:  761:    case baron:
    #####:  762:      state->numBuys++;//Increase buys by 1!
    #####:  763:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  764:	int p = 0;//Iterator for hand!
    #####:  765:	int card_not_discarded = 1;//Flag for discard set!
    #####:  766:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  767:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  768:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  769:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  770:	    state->discardCount[currentPlayer]++;
    #####:  771:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  772:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  773:	    }
    #####:  774:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  775:	    state->handCount[currentPlayer]--;
    #####:  776:	    card_not_discarded = 0;//Exit the loop
    #####:  777:	  }
    #####:  778:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  779:	    if(DEBUG) {
        -:  780:	      printf("No estate cards in your hand, invalid choice\n");
        -:  781:	      printf("Must gain an estate if there are any\n");
        -:  782:	    }
    #####:  783:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  784:	      gainCard(estate, state, 0, currentPlayer);
    #####:  785:	      state->supplyCount[estate]--;//Decrement estates
    #####:  786:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  787:		isGameOver(state);
    #####:  788:	      }
    #####:  789:	    }
    #####:  790:	    card_not_discarded = 0;//Exit the loop
    #####:  791:	  }
        -:  792:			    
        -:  793:	  else{
    #####:  794:	    p++;//Next card
        -:  795:	  }
        -:  796:	}
    #####:  797:      }
        -:  798:			    
        -:  799:      else{
    #####:  800:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  801:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  802:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  803:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  804:	    isGameOver(state);
    #####:  805:	  }
    #####:  806:	}
        -:  807:      }
        -:  808:	    
        -:  809:      
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case great_hall:
        -:  813:      //+1 Card
    #####:  814:      drawCard(currentPlayer, state);
        -:  815:			
        -:  816:      //+1 Actions
    #####:  817:      state->numActions++;
        -:  818:			
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
    #####:  821:      return 0;
        -:  822:		
        -:  823:    case minion:
        -:  824:      //+1 action
    #####:  825:      state->numActions++;
        -:  826:			
        -:  827:      //discard card from hand
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
        -:  829:			
    #####:  830:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  831:	{
    #####:  832:	  state->coins = state->coins + 2;
    #####:  833:	}
        -:  834:			
    #####:  835:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  836:	{
        -:  837:	  //discard hand
    #####:  838:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  839:	    {
    #####:  840:	      discardCard(handPos, currentPlayer, state, 0);
        -:  841:	    }
        -:  842:				
        -:  843:	  //draw 4
    #####:  844:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  845:	    {
    #####:  846:	      drawCard(currentPlayer, state);
    #####:  847:	    }
        -:  848:				
        -:  849:	  //other players discard hand and redraw if hand size > 4
    #####:  850:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  851:	    {
    #####:  852:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  853:		{
    #####:  854:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  855:		    {
        -:  856:		      //discard hand
    #####:  857:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  858:			{
    #####:  859:			  discardCard(handPos, i, state, 0);
        -:  860:			}
        -:  861:							
        -:  862:		      //draw 4
    #####:  863:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  864:			{
    #####:  865:			  drawCard(i, state);
    #####:  866:			}
    #####:  867:		    }
    #####:  868:		}
    #####:  869:	    }
        -:  870:				
    #####:  871:	}
    #####:  872:      return 0;
        -:  873:		
        -:  874:    case steward:
    #####:  875:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  876:	{
        -:  877:	  //+2 cards
    #####:  878:	  drawCard(currentPlayer, state);
    #####:  879:	  drawCard(currentPlayer, state);
    #####:  880:	}
    #####:  881:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  882:	{
        -:  883:	  //+2 coins
    #####:  884:	  state->coins = state->coins + 2;
    #####:  885:	}
        -:  886:      else
        -:  887:	{
        -:  888:	  //trash 2 cards in hand
    #####:  889:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  890:	  discardCard(choice3, currentPlayer, state, 1);
        -:  891:	}
        -:  892:			
        -:  893:      //discard card from hand
    #####:  894:      discardCard(handPos, currentPlayer, state, 0);
    #####:  895:      return 0;
        -:  896:		
        -:  897:    case tribute:
    #####:  898:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  899:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  900:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  901:	  state->deckCount[nextPlayer]--;
    #####:  902:	}
    #####:  903:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  904:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  905:	  state->discardCount[nextPlayer]--;
    #####:  906:	}
        -:  907:	else{
        -:  908:	  //No Card to Reveal
        -:  909:	  if (DEBUG){
        -:  910:	    printf("No cards to reveal\n");
        -:  911:	  }
        -:  912:	}
    #####:  913:      }
        -:  914:	    
        -:  915:      else{
    #####:  916:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  917:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  918:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  919:	    state->deckCount[nextPlayer]++;
    #####:  920:	    state->discard[nextPlayer][i] = -1;
    #####:  921:	    state->discardCount[nextPlayer]--;
    #####:  922:	  }
        -:  923:			    
    #####:  924:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  925:	} 
    #####:  926:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  927:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  928:	state->deckCount[nextPlayer]--;
    #####:  929:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  930:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  931:	state->deckCount[nextPlayer]--;
        -:  932:      }    
        -:  933:		       
    #####:  934:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  935:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  936:	state->playedCardCount++;
    #####:  937:	tributeRevealedCards[1] = -1;
    #####:  938:      }
        -:  939:
    #####:  940:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  941:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  942:	  state->coins += 2;
    #####:  943:	}
        -:  944:		    
    #####:  945:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  946:	  drawCard(currentPlayer, state);
    #####:  947:	  drawCard(currentPlayer, state);
    #####:  948:	}
        -:  949:	else{//Action Card
    #####:  950:	  state->numActions = state->numActions + 2;
        -:  951:	}
    #####:  952:      }
        -:  953:	    
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case ambassador:
    #####:  957:      j = 0;		//used to check if player has enough cards to discard
        -:  958:
    #####:  959:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  960:	{
    #####:  961:	  return -1;				
        -:  962:	}
        -:  963:
    #####:  964:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  965:	{
    #####:  966:	  return -1;
        -:  967:	}
        -:  968:
    #####:  969:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  972:	    {
    #####:  973:	      j++;
    #####:  974:	    }
    #####:  975:	}
    #####:  976:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  977:	{
    #####:  978:	  return -1;				
        -:  979:	}
        -:  980:
        -:  981:      if (DEBUG) 
        -:  982:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  983:
        -:  984:      //increase supply count for choosen card by amount being discarded
    #####:  985:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  986:			
        -:  987:      //each other player gains a copy of revealed card
    #####:  988:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	{
    #####:  990:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  991:	    {
    #####:  992:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  993:	    }
    #####:  994:	}
        -:  995:
        -:  996:      //discard played card from hand
    #####:  997:      discardCard(handPos, currentPlayer, state, 0);			
        -:  998:
        -:  999:      //trash copies of cards returned to supply
    #####: 1000:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
    #####: 1002:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:	    {
    #####: 1004:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1005:		{
    #####: 1006:		  discardCard(i, currentPlayer, state, 1);
    #####: 1007:		  break;
        -: 1008:		}
    #####: 1009:	    }
    #####: 1010:	}			
        -: 1011:
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case cutpurse:
        -: 1015:
    #####: 1016:      updateCoins(currentPlayer, state, 2);
    #####: 1017:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
    #####: 1019:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1020:	    {
    #####: 1021:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1022:		{
    #####: 1023:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1024:		    {
    #####: 1025:		      discardCard(j, i, state, 0);
    #####: 1026:		      break;
        -: 1027:		    }
    #####: 1028:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1029:		    {
    #####: 1030:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1031:			{
        -: 1032:			  if (DEBUG)
        -: 1033:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1034:			}	
    #####: 1035:		      break;
        -: 1036:		    }		
    #####: 1037:		}
        -: 1038:					
    #####: 1039:	    }
        -: 1040:				
    #####: 1041:	}				
        -: 1042:
        -: 1043:      //discard played card from hand
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:
        -: 1048:		
        -: 1049:    case embargo: 
        -: 1050:      //+2 Coins
    #####: 1051:      state->coins = state->coins + 2;
        -: 1052:			
        -: 1053:      //see if selected pile is in play
    #####: 1054:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1055:	{
    #####: 1056:	  return -1;
        -: 1057:	}
        -: 1058:			
        -: 1059:      //add embargo token to selected supply pile
    #####: 1060:      state->embargoTokens[choice1]++;
        -: 1061:			
        -: 1062:      //trash card
    #####: 1063:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case outpost:
        -: 1067:      //set outpost flag
    #####: 1068:      state->outpostPlayed++;
        -: 1069:			
        -: 1070:      //discard card
    #####: 1071:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1072:      return 0;
        -: 1073:		
        -: 1074:    case salvager:
        -: 1075:      //+1 buy
    #####: 1076:      state->numBuys++;
        -: 1077:			
    #####: 1078:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
        -: 1080:	  //gain coins equal to trashed card
    #####: 1081:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1082:	  //trash card
    #####: 1083:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1084:	}
        -: 1085:			
        -: 1086:      //discard card
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case sea_hag:
    #####: 1091:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1092:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1093:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1094:	  state->discardCount[i]++;
    #####: 1095:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1096:	}
    #####: 1097:      }
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case treasure_map:
        -: 1101:      //search hand for another treasure_map
    #####: 1102:      index = -1;
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1106:	    {
    #####: 1107:	      index = i;
    #####: 1108:	      break;
        -: 1109:	    }
    #####: 1110:	}
    #####: 1111:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
        -: 1113:	  //trash both treasure cards
    #####: 1114:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1115:	  discardCard(index, currentPlayer, state, 1);
        -: 1116:
        -: 1117:	  //gain 4 Gold cards
    #####: 1118:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1121:	    }
        -: 1122:				
        -: 1123:	  //return success
    #####: 1124:	  return 1;
        -: 1125:	}
        -: 1126:			
        -: 1127:      //no second treasure_map found in hand
    #####: 1128:      return -1;
        -: 1129:    }
        -: 1130:	
    #####: 1131:  return -1;
    60010: 1132:}
        -: 1133:
function discardCard called 20002 returned 100% blocks executed 70%
        -: 1134:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1135:{
        -: 1136:	
        -: 1137:  //if card is not trashed, added to Played pile 
    20002: 1138:  if (trashFlag < 1)
branch  0 taken 0
branch  1 taken 20002
        -: 1139:    {
        -: 1140:      //add card to played pile
    #####: 1141:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1142:      state->playedCardCount++;
    #####: 1143:    }
        -: 1144:	
        -: 1145:  //set played card to -1
    20002: 1146:  state->hand[currentPlayer][handPos] = -1;
        -: 1147:	
        -: 1148:  //remove card from player's hand
    20002: 1149:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0
branch  1 taken 20002
        -: 1150:    {
        -: 1151:      //reduce number of cards in hand
    #####: 1152:      state->handCount[currentPlayer]--;
    #####: 1153:    }
    20002: 1154:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 20002
        -: 1155:    {
        -: 1156:      //reduce number of cards in hand
    #####: 1157:      state->handCount[currentPlayer]--;
    #####: 1158:    }
        -: 1159:  else 	
        -: 1160:    {
        -: 1161:      //replace discarded card with last card in hand
    20002: 1162:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1163:      //set last card to -1
    20002: 1164:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1165:      //reduce number of cards in hand
    20002: 1166:      state->handCount[currentPlayer]--;
        -: 1167:    }
        -: 1168:	
    20002: 1169:  return 0;
        -: 1170:}
        -: 1171:
function gainCard called 60012 returned 100% blocks executed 81%
        -: 1172:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1173:{
        -: 1174:  //Note: supplyPos is enum of choosen card
        -: 1175:	
        -: 1176:  //check if supply pile is empty (0) or card is not used in game (-1)
    60012: 1177:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0
branch  1 taken 60012
        -: 1178:    {
    #####: 1179:      return -1;
        -: 1180:    }
        -: 1181:	
        -: 1182:  //added card for [whoseTurn] current player:
        -: 1183:  // toFlag = 0 : add to discard
        -: 1184:  // toFlag = 1 : add to deck
        -: 1185:  // toFlag = 2 : add to hand
        -: 1186:
    60012: 1187:  if (toFlag == 1)
branch  0 taken 0
branch  1 taken 60012
        -: 1188:    {
    #####: 1189:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1190:      state->deckCount[player]++;
    #####: 1191:    }
    60012: 1192:  else if (toFlag == 2)
branch  0 taken 60010
branch  1 taken 2
        -: 1193:    {
    60010: 1194:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    60010: 1195:      state->handCount[player]++;
    60010: 1196:    }
        -: 1197:  else
        -: 1198:    {
        2: 1199:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1200:      state->discardCount[player]++;
        -: 1201:    }
        -: 1202:	
        -: 1203:  //decrease number in supply pile
    60012: 1204:  state->supplyCount[supplyPos]--;
        -: 1205:	 
    60012: 1206:  return 0;
    60012: 1207:}
        -: 1208:
function updateCoins called 60030 returned 100% blocks executed 100%
        -: 1209:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1210:{
        -: 1211:  int i;
        -: 1212:	
        -: 1213:  //reset coin count
    60030: 1214:  state->coins = 0;
        -: 1215:
        -: 1216:  //add coins for each Treasure card in player's hand
   720332: 1217:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 300136
branch  1 taken 60030
        -: 1218:    {
   300136: 1219:      if (state->hand[player][i] == copper)
branch  0 taken 209752
branch  1 taken 90384
        -: 1220:	{
   209752: 1221:	  state->coins += 1;
   209752: 1222:	}
    90384: 1223:      else if (state->hand[player][i] == silver)
branch  0 taken 4
branch  1 taken 90380
        -: 1224:	{
        4: 1225:	  state->coins += 2;
        4: 1226:	}
    90380: 1227:      else if (state->hand[player][i] == gold)
branch  0 taken 2
branch  1 taken 90378
        -: 1228:	{
        2: 1229:	  state->coins += 3;
        2: 1230:	}	
   300136: 1231:    }	
        -: 1232:
        -: 1233:  //add bonus
    60030: 1234:  state->coins += bonus;
        -: 1235:
    60030: 1236:  return 0;
        -: 1237:}
        -: 1238:
function cardEffectSmithy called 20004 returned 100% blocks executed 100%
        -: 1239:int cardEffectSmithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1240:  //+3 Cards
        -: 1241:  int i;
   160032: 1242:  for (i = 0; i < 3; i++)
branch  0 taken 60012
branch  1 taken 20004
        -: 1243:    {
    60012: 1244:      drawCard(currentPlayer, state);
    60012: 1245:    }
        -: 1246:    		
        -: 1247:  //discard card from hand
        -: 1248:  // bug #1 forgot to discard card after playing the card
        -: 1249:  // discardCard(handPos, currentPlayer, state, 0);
    20004: 1250:  return 0;
        -: 1251:}
function cardEffectAdventurer called 20002 returned 100% blocks executed 100%
        -: 1252:int cardEffectAdventurer(int currentPlayer, struct gameState *state, int handPos)
        -: 1253:{
    20002: 1254:  int drawntreasure=0;
    20002: 1255:  int z = 0;// this is the counter for the temp hand
        -: 1256:  int temphand[MAX_HAND];
        -: 1257:  int cardDrawn;
        -: 1258:  // bug #2: change <2 to <=2, draw 3 treasure cards
   204678: 1259:  while(drawntreasure<=2){
branch  0 taken 82337
branch  1 taken 20002
    82337: 1260:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1612
branch  1 taken 80725
     1612: 1261:      shuffle(currentPlayer, state);
     1612: 1262:    }
    82337: 1263:    drawCard(currentPlayer, state);
    82337: 1264:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   126999: 1265:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 22331
branch  1 taken 60006
branch  2 taken 22331
branch  3 taken 0
branch  4 taken 0
branch  5 taken 22331
    60006: 1266:      drawntreasure++;
        -: 1267:    else{
    22331: 1268:      temphand[z]=cardDrawn;
    22331: 1269:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    22331: 1270:      z++;
        -: 1271:    }
        -: 1272:  }
    84666: 1273:  while(z-1>=0){
branch  0 taken 22331
branch  1 taken 20002
    22331: 1274:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    22331: 1275:    z=z-1;
        -: 1276:  }
    20002: 1277:  return 0;
        -: 1278:}
function cardEffectMine called 0 returned 0% blocks executed 0%
        -: 1279:int cardEffectMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1280:{
        -: 1281:      int j;
        -: 1282:
    #####: 1283:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1284:
    #####: 1285:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1286:	{
    #####: 1287:	  return -1;
        -: 1288:	}
        -: 1289:		
    #####: 1290:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1291:	{
    #####: 1292:	  return -1;
        -: 1293:	}
        -: 1294:
    #####: 1295:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1296:	{
    #####: 1297:	  return -1;
        -: 1298:	}
        -: 1299:
        -: 1300:      //Bug #3: change the toFlag from 2 to 3
    #####: 1301:      gainCard(choice2, state, 3, currentPlayer);
        -: 1302:
        -: 1303:      //discard card from hand
    #####: 1304:      discardCard(handPos, currentPlayer, state, 0);
        -: 1305:
        -: 1306:      //discard trashed card
        -: 1307:      int i;
    #####: 1308:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1309:	{
    #####: 1310:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1311:	    {
    #####: 1312:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1313:	      break;
        -: 1314:	    }
    #####: 1315:	}
    #####: 1316:      return 0;
    #####: 1317:}
function cardEffectVillage called 20002 returned 100% blocks executed 100%
        -: 1318:int cardEffectVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1319:{
        -: 1320:      //+1 Card
    20002: 1321:      drawCard(currentPlayer, state);
        -: 1322:			
        -: 1323:      //+2 Actions
    20002: 1324:      state->numActions = state->numActions + 2;
        -: 1325:			
        -: 1326:      // bug #4: trash the card instead of discard the card
        -: 1327:      //discard played card from hand
    20002: 1328:      discardCard(handPos, currentPlayer, state, 1);
    20002: 1329:      return 0;
        -: 1330:
        -: 1331:}
function cardEffectRemodel called 0 returned 0% blocks executed 0%
        -: 1332:int cardEffectRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1333:{
        -: 1334:      int j;
        -: 1335:      // bug #5: swap choice1 with choice2
    #####: 1336:      j = state->hand[currentPlayer][choice2];  //store card we will trash
        -: 1337:
    #####: 1338:      if ( (getCost(state->hand[currentPlayer][choice2]) + 2) > getCost(choice1) )
branch  0 never executed
branch  1 never executed
        -: 1339:	{
    #####: 1340:	  return -1;
        -: 1341:	}
        -: 1342:
    #####: 1343:      gainCard(choice1, state, 0, currentPlayer);
        -: 1344:
        -: 1345:      //discard card from hand
    #####: 1346:      discardCard(handPos, currentPlayer, state, 0);
        -: 1347:
        -: 1348:      //discard trashed card
        -: 1349:      int i;
    #####: 1350:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1351:	{
    #####: 1352:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1353:	    {
    #####: 1354:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1355:	      break;
        -: 1356:	    }
    #####: 1357:	}
        -: 1358:
        -: 1359:
    #####: 1360:      return 0;
    #####: 1361:}
        -: 1362://end of dominion.c
        -: 1363:
