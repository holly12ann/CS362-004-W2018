        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:#include <math.h>
        -:    8:
function main called 1 returned 100% blocks executed 72%
        -:    9:int main (int argc, char** argv){
        -:   10:    
        -:   11:    //define variables
        -:   12:    struct gameState* curState;
        -:   13:    
        1:   14:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron};
        -:   15:    
        1:   16:    int seed = 2;
        1:   17:    int result = 0;
        1:   18:    int fCount = 0;
        1:   19:    int befHand =0;
        1:   20:    int aftHand =0;
        1:   21:    int bonus = 0;
        -:   22:    
        -:   23:    
        1:   24:    printf("\n********************************************************************\n");
        1:   25:    printf("********************************************************************\n\n");
        1:   26:    printf("                            CARD TEST 1                             \n");
        1:   27:    printf("                        Testing Card: Smithy                        \n\n");
        1:   28:    printf("********************************************************************\n");
        1:   29:    printf("********************************************************************\n\n\n");
        -:   30:    
        1:   31:    printf("********************* TEST 1:  Gaining 3 cards *********************\n");
        -:   32:    
        1:   33:    curState = newGame();
        1:   34:    initializeGame(2, k, seed, curState);
        -:   35:    
        1:   36:    befHand = curState->handCount[2];
        1:   37:    printf("Handcount before gaining: %d\n", befHand);
        -:   38:    
        1:   39:    gainCard(smithy, curState, 2, 2);
        -:   40:    
        1:   41:    aftHand = curState->handCount[2];
        1:   42:    printf("Handcount after gaining: %d\n", aftHand);
        -:   43:    
        1:   44:    cardEffect(smithy, 0, 0, 0, curState, 0, &bonus);
        1:   45:    aftHand = curState->handCount[2];
        1:   46:    printf("Handcount after effect: %d\n", aftHand);
        -:   47:    
        1:   48:    printf("    Expected result: %d\n", befHand + 3);
        -:   49:    
        1:   50:    if (result == befHand + 3) {
branch  0 taken 0
branch  1 taken 1
    #####:   51:        printf("    Actual result  : %d\n",aftHand);
    #####:   52:        printf("    PASSED!\n");
    #####:   53:    }
        -:   54:    else{
        1:   55:        printf("    Actual result  : %d\n",aftHand);
        1:   56:        printf("    FAILED\n");
        -:   57:        //increment fail count
        1:   58:        fCount++;
        -:   59:    }
        -:   60: 
        1:   61:    printf("\n************ TEST 2:  Verify card is used correctly  **************\n");
        -:   62:    
        1:   63:    curState = newGame();
        1:   64:    initializeGame(2, k, seed, curState);
        -:   65:    
        1:   66:    gainCard(smithy, curState, 2, 2);
        -:   67:    
        1:   68:    result = cardEffect(smithy, 0, 0, 0, curState, 0, &bonus);
        -:   69:    
        1:   70:    printf("    Expected result: 0\n");
        -:   71:    
        1:   72:    if (result == 0) {
branch  0 taken 1
branch  1 taken 0
        1:   73:        printf("    Actual result  : %d\n",result);
        1:   74:        printf("    PASSED!\n");
        1:   75:    }
        -:   76:    else{
    #####:   77:        printf("    Actual result  : %d\n",result);
    #####:   78:        printf("    FAILED\n");
        -:   79:        //increment fail count
    #####:   80:        fCount++;
        -:   81:    }
        -:   82:    
        1:   83:    printf("\n\n************************* TESTING COMPLETE *************************\n");
        -:   84:    
        1:   85:    if (fCount > 0){
branch  0 taken 1
branch  1 taken 0
        1:   86:        printf("\n                      %d OF THE TESTS FAILED!\n\n", fCount);
        1:   87:    }
        -:   88:    else
    #####:   89:        printf("\n                      ALL TESTS WERE PASSED!!\n\n");
        1:   90:}
        -:   91:
        -:   92:
        -:   93:
